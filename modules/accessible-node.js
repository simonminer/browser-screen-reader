/**
 * Class to encapsulate accessibility data for an HTML node/tag.
 */

'use strict';

export class AccessibleNode {
    /**
     * Name of the tag associated with this node.
     * @type {string}
     */
    tagName = undefined;

    /**
     * Actual DOM element associated with this accessible node.
     * @type {Node}
     */
    actualNode = undefined;

    /**
     * Virtual node from the shadow DOM generated by axe-core
     * associated with this accessible node.
     * @type {VirtualNode}
     */
    virtualNode = undefined;

    /**
     * Accessible role of this node
     * @type {string}
     */
    role = undefined;

    /**
     * Accessible name of this node
     * @type {string}
     */
    name = undefined;

    /**
     * Current value of this node
     * @type {string}
     */
    value = undefined;

    /**
     * Metadata about this node, typically depending on its role;
     * for instance, heading level, position in list, count of listitems.
     * This attribute is formatted as text for use in the toString() method.
     * @type {string}
     */
    metadata = undefined;

    /**
     * Character string to separate accessible data values
     * returned by the toString() method.
     * @type {string}
     */
    separator = ': ';

    /**
     * @param {Node} actualNode - Element in the DOM tree corresponding to this accessible node.
     * @param {VirtualNode} virtualNode - Virtual node from the shadow DOM for this accessible node.
     * @returns {AccessibleNode} - A new instance of the AccessibleNode class.
     */
    constructor(actualNode, virtualNode = undefined) {
        this.actualNode = actualNode;
        this.tagName = actualNode.tagName.toLowerCase();
        this.name = actualNode.hasAttribute('name')
            ? actualNode.getAttribute('name')
            : undefined;
        this.virtualNode = virtualNode;
    }

    /**
     * Renders the data in this object as a string
     * @returns {String}
     */
    toString() {
        var roleText = this.role;
        if (this.metadata) {
            roleText += ' ' + this.metadata;
        }

        var values = [];
        [roleText, this.name, this.value].forEach((data) => {
            if (data !== undefined && data !== null && data !== '') {
                values.push(data);
            }
        });
        const text = values.join(this.separator);
        return text;
    }
}
